package com.library.view.devolution;

import com.library.controller.DevolutionController;
import com.library.exceptions.DateBeforeLoanDateException;
import com.library.exceptions.DevolutionNotFoundException;
import com.library.exceptions.UninformedParameterException;
import com.library.model.entities.Devolution;
import java.awt.HeadlessException;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hugo Diniz
 */
public class ListDevolutionScreen extends javax.swing.JInternalFrame {

    private final DevolutionController devolutionController;
    private final List<Devolution> devolutions;
    private final javax.swing.JDesktopPane desktop;
    private final DevolutionOptions devolutionOptions;

    public ListDevolutionScreen(DevolutionController devolutionController, javax.swing.JDesktopPane desktop, DevolutionOptions devolutionOptions) {
        this.devolutionController = devolutionController;
        this.desktop = desktop;
        this.devolutionOptions = devolutionOptions;
        this.devolutions = devolutionController.getDevolutions();
        initComponents();
        iniTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableDevolution = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnSelect = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Selecione uma devolução");
        setPreferredSize(new java.awt.Dimension(469, 469));

        tableDevolution.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User (Name)", "Book (Title)", "Loan Date", "Estimated Date", "Return Date", "Traffic Ticket"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDevolution.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableDevolution.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableDevolution);
        if (tableDevolution.getColumnModel().getColumnCount() > 0) {
            tableDevolution.getColumnModel().getColumn(0).setResizable(false);
            tableDevolution.getColumnModel().getColumn(1).setResizable(false);
            tableDevolution.getColumnModel().getColumn(3).setResizable(false);
            tableDevolution.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Selecione uma devolução:");

        btnSelect.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSelect.setText("SELECT");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSelect)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnSelect)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        try {
            Devolution devolution = devolutionController.getDevolutionById(devolutions.get(getRow()).getId());
            selectOption(devolution, devolutionController, devolutionOptions, desktop);
            this.dispose();
        } catch (DevolutionNotFoundException | IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnSelectActionPerformed

    private int getRow() {
        int row = tableDevolution.getSelectedRow();
 
        if (row < 0) {
            throw new IllegalArgumentException("Select a row.");
        }
        return row;
    }
    
    private void selectOption(Devolution devolution, DevolutionController devolutionController, DevolutionOptions options, javax.swing.JDesktopPane desktop) {
        if (options == DevolutionOptions.UPDATE) {
            UpdateDevolutionScreen updateDevolutionScreen = new UpdateDevolutionScreen(devolution, devolutionController);
            updateDevolutionScreen.setVisible(true);
            desktop.add(updateDevolutionScreen);
        } else {
            try {
                devolutionController.deleteDevolution(devolution.getId());
                JOptionPane.showMessageDialog(this, "Devolução removida com sucesso!");
                this.dispose();
            } catch (DevolutionNotFoundException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        }
    }
    
    private void iniTable() {
        DefaultTableModel tableModel = (DefaultTableModel) tableDevolution.getModel();
        if (!devolutions.isEmpty()) {
            try {
                devolutions.forEach((Devolution devolution) -> {
                tableModel.addRow(new Object[] {devolution.getLoan().getUser().getName(), 
                                                devolution.getLoan().getBook().getTitle(),
                                                devolution.getLoan().getLoanDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                                                devolution.getLoan().getEstimatedDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                                                devolution.getReturnDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                                                devolution.getTrafficTicket()});});
                tableDevolution.setModel(tableModel);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Lista de devoluções vazia.");
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableDevolution;
    // End of variables declaration//GEN-END:variables
}
